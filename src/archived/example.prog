


"example_img.png" set-buffer # sets the buffer to that image
# Begins a pass that is executed on each pixel
# All images are treated on a 0..1 normalized scale when reading from the input buffer?
# Though output buffer + operations use a pixel value.
begin-pass
    # frag_pos is the current coordinate of the pixel
    # input-buffer takes a coordinate, spits out a color
    frag_pos input-buffer # this basically gets the color in the input buffer for the current frag_pos
    0.2 1.0 0.2 1.0 make-color # adds a new color to the stack
    mix # mixes the top two colors

    # The final value on the stack will always be a color and is what is written to the output buffer
end-pass

"updated_image.png" save-buffer

# the output buffer is then displayed, or saved to disk. Can also set the output buffer to the input buffer.